package ${packageNameResource}.resource;

import java.net.URI;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.fastjson.JSON;
import ${packageNameDomain}.domain.${table.className};
import ${packageNameDomain}.domain.Page;
import ${packageNameDomain}.domain.PageRequest;
import ${packageNameDomain}.exception.Inval${table.primaryKey.property}DataException;
import ${packageNameDomain}.platform.api.${table.className}Service;

/**
 * <pre>
 * ${table.className}对应资源
 * ${table.remark}
 * </pre>
 * 
 * @author wwh
 * @date 2017年8月22日 下午12:18:40
 */
@Path("/${table.lowerClassName}s")
@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
public class ${table.className}Resource {

    private static Logger logger = LoggerFactory.getLogger(${table.className}Resource.class);

    @Autowired
    private ${table.className}Service ${table.lowerClassName}Service;

    @Path("/")
    @POST
    public Response add${table.className}(${table.className} ${table.lowerClassName}, @Context UriInfo uriInfo) {

        if (logger.isDebugEnabled()) {
            logger.debug("创建资源参数是：{}", JSON.toJSONString(${table.lowerClassName}));
        }

        // 清空${table.primaryKey.property}
        ${table.lowerClassName}.${table.primaryKey.javaSetMethod}(null);

        ${table.className} _uriInfo = ${table.lowerClassName}Service.insertSelective(${table.lowerClassName});

        if (_uriInfo == null) {
            throw new InvalidDataException("资源创建失败");
        }

        URI location = uriInfo.getAbsolutePathBuilder().path(${table.className}Resource.class, "get${table.className}").build(${table.lowerClassName}.${table.primaryKey.javaGetMethod}());

        return Response.created(location).build();
    }

    @Path("/{${table.primaryKey.property}}")
    @DELETE
    public Response delete${table.className}(@PathParam("${table.primaryKey.property}") Long ${table.primaryKey.property}) {

        logger.debug("删除资源的${table.primaryKey.property}是：{}", ${table.primaryKey.property});

        boolean b = ${table.lowerClassName}Service.deleteByPrimaryKey(${table.primaryKey.property});

        if (b) {
            return Response.ok().build();
        } else {
            return Response.status(Status.NOT_FOUND).build();
        }
    }

    @Path("/{${table.primaryKey.property}}")
    @PUT
    public Response update${table.className}(@PathParam("${table.primaryKey.property}") Long ${table.primaryKey.property}, ${table.className} ${table.lowerClassName}) {

        if (logger.isDebugEnabled()) {
            logger.debug(" 修改资源的${table.primaryKey.property}是：{} , 参数是：{}", ${table.primaryKey.property}, JSON.toJSONString(${table.lowerClassName}));
        }

        ${table.lowerClassName}.setId(${table.primaryKey.property});

        boolean b = ${table.lowerClassName}Service.updateByPrimaryKeySelective(${table.lowerClassName});

        if (b) {
            return Response.ok().build();
        } else {
            return Response.status(Status.NOT_FOUND).build();
        }
    }

    @Path("/")
    @GET
    public Response get${table.className}s(@QueryParam("") ${table.className} ${table.lowerClassName}, @QueryParam("page") @DefaultValue("1") int page,
            @QueryParam("pageSize") @DefaultValue("20") int pageSize) {

        if (logger.isDebugEnabled()) {
            logger.debug("查询资源的参数是：{}\n\t页数是：{} , 页码是：{}", JSON.toJSONString(${table.lowerClassName}), page, pageSize);
        }

        PageRequest pageRequest = new PageRequest(page, pageSize);
        Page<${table.className}> page${table.className} = ${table.lowerClassName}Service.findListByParam(${table.lowerClassName}, pageRequest);

        return Response.ok().entity(page${table.className}).build();
    }

    @Path("/{${table.primaryKey.property}}")
    @GET
    public Response get${table.className}(@PathParam("${table.primaryKey.property}") Long ${table.primaryKey.property}) {

        logger.debug("获取资源的${table.primaryKey.property}是：{}", ${table.primaryKey.property});

        ${table.className} ${table.lowerClassName} = ${table.lowerClassName}Service.findByPrimaryKey(${table.primaryKey.property});

        if (${table.lowerClassName} == null) {
            throw new Inval${table.primaryKey.property}DataException("没有${table.primaryKey.property}对应的记录");
        }

        return Response.ok().entity(${table.lowerClassName}).build();
    }
}
