
package ${packageName}.mapper;

import static org.junit.Assert.*;

#foreach ($class in ${table.importClass})
import ${class};
#end
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import ${packageName}.mapper.${table.className}Mapper;
import ${packageNameDomain}.domain.${table.className};

/**
 * <pre>
 * 测试 ${table.className}Mapper
 * ${table.remark}
 * 对应数据库表：${table.name}
 * </pre>
 *
 * @author ${author}
 * @date ${date2}
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
// 避免加载一些其他的配置，如Dubbo等
@ContextConfiguration(locations = { "classpath:applicationContextTest.xml" })
@Transactional
public class ${table.className}MapperTest {

    private static final Logger logger = LoggerFactory.getLogger(${table.className}MapperTest.class);

    @Autowired
    private ${table.className}Mapper ${table.lowerClassName}Mapper;

    @Test
    public void testInsert() {
        ${table.className} baseDo = new ${table.className}();
#foreach ($col in ${table.notPkColumns})
        baseDo.${col.javaSetMethod}(${col.testValue});
#end

        int ret = ${table.lowerClassName}Mapper.insert(baseDo);
        logger.debug("插入受影响行数：{}", ret);

        ${table.primaryKey.javaClassName} id = baseDo.${table.primaryKey.javaGetMethod}();
        logger.debug("插入的ID是：{}", id);

        ${table.className} rdo = ${table.lowerClassName}Mapper.findByPrimaryKey(id);

        assertNotNull("插入的对象不能为空", rdo);

        logger.debug("插入的对象查询结果：{}", rdo);

        int retdel = ${table.lowerClassName}Mapper.deleteByPrimaryKey(id);

        assertEquals("删除异常了", 1, retdel);

        // @@@@@@@@@@@@ 测试选择性插入

        ret = ${table.lowerClassName}Mapper.insertSelective(baseDo);
        logger.debug("选择性插入受影响行数：{}", ret);

        id = baseDo.${table.primaryKey.javaGetMethod}();
        logger.debug("选择性插入的ID是：{}", id);

        retdel = ${table.lowerClassName}Mapper.deleteByPrimaryKey(id);

        assertEquals("删除异常了", 1, retdel);
    }

    @Test
    public void testDeleteByPrimaryKey() {
        ${table.primaryKey.javaClassName} id = ${table.primaryKey.testValue};
        int ret = ${table.lowerClassName}Mapper.deleteByPrimaryKey(id);
        logger.debug("deleteByPrimaryKey( {} ) 受影响行数：{}", id, ret);
        if (ret > 0) {
            ${table.className} rdo = ${table.lowerClassName}Mapper.findByPrimaryKey(id);
            assertNull("deleteByPrimaryKey 删除失败", rdo);
        }
    }

    @Test
    public void testFindByPrimaryKey() {
        ${table.primaryKey.javaClassName} id = ${table.primaryKey.testValue};
        ${table.className} rdo = ${table.lowerClassName}Mapper.findByPrimaryKey(id);
        logger.debug("findByPrimaryKey( {} )  查询到记录：{}", id, rdo);
    }

    @Test
    public void testSelectBySelective() {
        ${table.className} record = new ${table.className}();
#foreach ($col in ${table.notPkColumns})
        record.${col.javaSetMethod}(${col.testValue});
#end
        List<${table.className}> list = ${table.lowerClassName}Mapper.selectBySelective(record);
        logger.debug("selectBySelective 查询到记录：{}", list.size());
    }

    @Test
    public void testUpdateByPrimaryKeySelective() {
        ${table.className} record = new ${table.className}();
#foreach ($col in ${table.columns})
        record.${col.javaSetMethod}(${col.testValue});
#end

        int ret = ${table.lowerClassName}Mapper.updateByPrimaryKeySelective(record);
        logger.debug("updateByPrimaryKeySelective( ) 受影响行数：{}", ret);
        if (ret > 0) {
            ${table.className} rdo = ${table.lowerClassName}Mapper.findByPrimaryKey(record.${table.primaryKey.javaGetMethod}());
            assertNotNull("updateByPrimaryKeySelective 更新了不存在的记录", rdo);

            // 继续条件查询
            List<${table.className}> list = ${table.lowerClassName}Mapper.selectBySelective(record);
            assertTrue("selectBySelective 查询失败", list.size() > 0);

        }
    }

    @Test
    public void testFindListByParam() {

        Map<String, Object> params = new HashMap<String, Object>();

        params.put("offset", 1);
        params.put("limit", 5);

        List<${table.className}> list = ${table.lowerClassName}Mapper.findListByParam(params);

        logger.debug("findListByParam 查询到记录：{}", list.size());
        for (${table.className} ${table.lowerClassName} : list) {
            logger.debug(JSON.toJSONString(${table.lowerClassName}));
        }
    }

}
