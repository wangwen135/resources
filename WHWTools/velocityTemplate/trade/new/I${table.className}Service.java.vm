/**
 * Copyright(C) 2015-2025 杏仁科技
 * All rights reserved
 * ${date1} Created
 */
package ${packageName}.api;

import java.util.List;

import com.xingren.sdb.components.constants.CommonConstants.Valid;
import com.xingren.sdb.components.result.BooleanResult;
import com.xingren.sdb.components.result.DefaultResult;
import ${packageName}.api.constants.Trade.Status;
import ${packageName}.api.dto.${table.className}DTO;

/**
 * <pre>
 * ${table.remark} 服务接口
 * </pre>
 *
 * @author ${author}
 * @date ${date2}
 *
 */
public interface I${table.className}Service {

    /**
     * 根据主键删除
     *
     * @param ${table.primaryKey.property}
     * @return 是否成功
     */
    BooleanResult deleteByPrimaryKey(${table.primaryKey.javaClassName} ${table.primaryKey.property});

    /**
     * 插入
     *
     * @param dto
     * @return 返回ID
     */
    DefaultResult<${table.primaryKey.javaClassName}> insert(${table.className}DTO dto);

    /**
     * 选择性插入
     *
     * @param dto
     * @return 返回ID
     */
    DefaultResult<${table.primaryKey.javaClassName}> insertSelective(${table.className}DTO dto);

    /**
     * 根据主键查找
     *
     * @param ${table.primaryKey.property}
     * @return 返回 ${table.className}DTO
     */
    DefaultResult<${table.className}DTO> selectByPrimaryKey(${table.primaryKey.javaClassName} ${table.primaryKey.property});

    /**
     * 根据主键选择性更新
     *
     * @param dto
     * @return 是否成功
     */
    BooleanResult updateByPrimaryKeySelective(${table.className}DTO dto);

    /**
     * 根据主键更新
     *
     * @param dto
     * @return 是否成功
     */
    BooleanResult updateByPrimaryKey(${table.className}DTO dto);

    /**
     * 根据DTO选择性查询
     *
     * @param dto
     * @return 返回 ${table.className}DTO 集合
     */
    DefaultResult<List<${table.className}DTO>> selectBySelective(${table.className}DTO dto);

    /**
     * 根据主键 启用/禁用 记录
     *
     * @param ${table.primaryKey.property}
     *            主键
     * @param valid
     *            Forest.Valid 类型枚举
     * @return 是否成功
     */
    BooleanResult changeValidByPKey(${table.primaryKey.javaClassName} ${table.primaryKey.property}, Valid valid);

    /**
     * 根据主键 修改记录状态
     * 
     * @param ${table.primaryKey.property}
     *            主键
     * @param status
     *            信息状态枚举
     * @return 是否成功
     */
    BooleanResult changeStatusByPKey(${table.primaryKey.javaClassName} ${table.primaryKey.property}, Status status);

    /**
     * <pre>
     * 根据主键 和 状态 查找 有效记录
     * 只查询 if_valid = 1 的有效记录
     * 如果 status 为null 则不作为查询条件
     * </pre>
     * 
     * @param ${table.primaryKey.property}
     *            主键ID
     * @param status
     *            信息状态
     * @return
     */
    DefaultResult<${table.className}DTO> selectByPrimaryKeyAndStatus(${table.primaryKey.javaClassName} ${table.primaryKey.property}, Status status);

    /**
     * <pre>
     * 根据帮助信息ID 和 状态 查找 有效记录
     * 只查询 if_valid = 1 的有效记录
     * 如果 status 为null 则不作为查询条件
     * </pre>
     * 
      * @param helpMessageId
     *            帮助信息ID
     * @param status
     *            信息状态
     * @return
     */
    DefaultResult<List<${table.className}DTO>> selectByHelpMessageIdAndStatus(Long helpMessageId, Status status);

    /**
     * <pre>
     * 根据订单ID 和 状态 查找 有效记录
     * 只查询 if_valid = 1 的有效记录
     * 如果 status 为null 则不作为查询条件
     * </pre>
     * 
      * @param orderId
     *            订单ID
     * @param status
     *            信息状态
     * @return
     */
    DefaultResult<List<${table.className}DTO>> selectByOrderIdAndStatus(Long orderId, Status status);

    /**
     * <pre>
     * 根据用户ID查询  分页
     * 按照ID倒序，从最近的开始查
     * 只查询有效的数据，if_valid=1
     * 如果指定分页 needPagination=true 则按照分页查询，默认分页
     * 如果信息状态 status 有值就按照信息状态查，如果没有值就不作为查询条件
     * </pre>
     * 
     * @param query
     *            userId 必须有值
     * @return 可能返回null
     */
    DefaultResult<List<${table.className}DTO>> selectPagingByUserId(${table.className}DTO query);

    /**
     * <pre>
     * 查询用户总记录数
     * 只查询有效的数据，if_valid=1
     * 如果status 有值，则作为查询条件
     * </pre>
     * 
     * @param userId
     * @return
     */
    DefaultResult<Integer> selectTotalRecordByUserId(Long userId, Status status);

}
